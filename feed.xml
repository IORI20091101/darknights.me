<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="http://jekyllrb.com" version="3.4.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2017-11-20T12:42:49+00:00</updated><id>/</id><subtitle>Dark knight's的个人技术博客,专注于web开发,追求前端最完美体验</subtitle><entry><title type="html">Generator函数的含义和用法</title><link href="/es6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2017/11/20/js-generator/" rel="alternate" type="text/html" title="Generator函数的含义和用法" /><published>2017-11-20T00:00:00+00:00</published><updated>2017-11-20T00:00:00+00:00</updated><id>/es6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2017/11/20/js-generator</id><content type="html" xml:base="/es6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2017/11/20/js-generator/">&lt;h2 id=&quot;同步和异步&quot;&gt;同步和异步&lt;/h2&gt;
&lt;p&gt;要了解generator首先需要说一下异步和同步，大家都知道，Javascript的语言执行环境是单线程（Single thread）.所谓&lt;code&gt;单线程&lt;/code&gt;，就是只一次只能完成一个任务如果有多个任务就需要排队，前面一个任务完成，再执行后面一个任务，一次类推。
这种做法&lt;/p&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;好处是实现起来比较简单，执行环境相对单纯.&lt;/li&gt;
    &lt;li&gt;坏处是只要有一个任务耗时很长，后面的任务都必须排队等着，会拖延整个程序的执行。常见的浏览器无响应（假死），往往就是因为某一段Javascript代码长时间运行（比如死循环），导致整个页面卡在这个地方，其他任务无法执行。&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;为了解决上面的问题javascript将语言执行分成了两种： 同步（Synchronous）和异步（Asynchronous）.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;同步模式即从上往下依次执行，等待前一个任务执行完成后在执行下一个任务，执行顺序与代码顺序是一样的。&lt;/li&gt;
  &lt;li&gt;异步模式是每一个任务有一个或者多个回调函数，前一个任务结束后不执行下一个任务而是执行毁掉函数，后一个任务不等前一个任务结束就执行。执行顺序与代码顺序是不一致的，异步的。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;异步模式的四种方法&quot;&gt;异步模式的四种方法&lt;/h2&gt;

&lt;h3 id=&quot;回调函数&quot;&gt;回调函数&lt;/h3&gt;

&lt;p&gt;如果有两个函数f1和f2,后者等待前者的执行结果。但是f1是一个很耗时的任务可以将f2写成f1的回调函数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    function f1(callback) {
        setTimeout(function() {
            // f1的任务代码
            callback();
        },1000)
    }

    f1(f2);

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;回调函数的优点是简单、容易理解和部署，缺点是不利于代码的阅读和维护，各个部分之间高度耦合（Coupling），流程会很混乱，而且每个任务只能指定一个回调函数。&lt;/p&gt;

&lt;h3 id=&quot;事件监听&quot;&gt;事件监听&lt;/h3&gt;
&lt;p&gt;采用事件驱动模式。任务的执行不取决于代码的顺序，而取决于某个事件是否发生，直接上代码&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    f1.on('done', f2); //f1监听'done'如果触发该事件执行f2,使用了jQuery的事件监听
    function f1(callback) {
        setTimeout(function() {
            // f1的任务代码

            f1.trigger('done');
        },1000)
    }

    f1(f2);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;发布订阅&quot;&gt;发布、订阅&lt;/h3&gt;

&lt;p&gt;我们假定，存在一个”信号中心”，某个任务执行完成，就向信号中心”发布”（publish）一个信号，其他任务可以向信号中心”订阅”（subscribe）这个信号，从而知道什么时候自己可以开始执行。这就叫做
&lt;a href=&quot;http://en.wikipedia.org/wiki/Publish-subscribe_pattern&quot;&gt;“发布/订阅模式”（publish-subscribe pattern）&lt;/a&gt;，又称&lt;a href=&quot;https://en.wikipedia.org/wiki/Observer_pattern&quot;&gt;“观察者模式”（observer pattern）&lt;/a&gt;。
这个模式有&lt;a href=&quot;https://msdn.microsoft.com/en-us/magazine/hh201955.aspx?f=255&amp;amp;MSPPError=-2147217396&quot;&gt;多种实现&lt;/a&gt;,本例子使用&lt;a href=&quot;https://gist.github.com/661855&quot;&gt;Tiny Pub/Sub&lt;/a&gt;,这是一个jQuery插件。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    jQuery.subscribe(&quot;done&quot;, f2); //首先，f2向&quot;信号中心&quot;jQuery订阅&quot;done&quot;信号。

    function f1(){
　　　　setTimeout(function () {
　　　　　　// f1的任务代码
　　　　　　jQuery.publish(&quot;done&quot;);
　　　　}, 1000);
　　}
//jQuery.publish(&quot;done&quot;)的意思是，f1执行完成后，向&quot;信号中心&quot;jQuery发布&quot;done&quot;信号，从而引发f2的执行。
//此外，f2完成执行后，也可以取消订阅（unsubscribe）。
　　jQuery.unsubscribe(&quot;done&quot;, f2);

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;promises&quot;&gt;Promises&lt;/h3&gt;
&lt;p&gt;Promises对象是CommonJS工作组提出的一种规范，目的是为异步编程提供统一接口。
它的思想是，每一个异步任务返回一个Promise对象，该对象有一个then方法，允许指定回调函数。比如，f1的回调函数f2,可以写成：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    function f1(){
　　　　var dfd = $.Deferred();
　　　　setTimeout(function () {
　　　　　　// f1的任务代码
　　　　　　dfd.resolve();
　　　　}, 500);
　　　　return dfd.promise;
　　}

　　f1().then(f2);
　　f1().then(f2).then(f3);
　　f1().then(f2).fail(f3);


&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;它还有一个前面三种方法都没有的好处：如果一个任务已经完成，再添加回调函数，该回调函数会立即执行。所以，你不用担心是否错过了某个事件或信号。这种方法的缺点就是编写和理解，都相对比较难。&lt;/p&gt;

&lt;h1 id=&quot;文章参考&quot;&gt;文章参考&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2015/04/generator.html&quot;&gt;Generator 函数的含义与用法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>toshiba</name></author><category term="es6" /><category term="javascript" /><summary type="html">同步和异步 要了解generator首先需要说一下异步和同步，大家都知道，Javascript的语言执行环境是单线程（Single thread）.所谓单线程，就是只一次只能完成一个任务如果有多个任务就需要排队，前面一个任务完成，再执行后面一个任务，一次类推。 这种做法 好处是实现起来比较简单，执行环境相对单纯. 坏处是只要有一个任务耗时很长，后面的任务都必须排队等着，会拖延整个程序的执行。常见的浏览器无响应（假死），往往就是因为某一段Javascript代码长时间运行（比如死循环），导致整个页面卡在这个地方，其他任务无法执行。</summary></entry><entry><title type="html">Lodash.js源码阅读分析（一）</title><link href="/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/2017/11/16/lodash-one/" rel="alternate" type="text/html" title="Lodash.js源码阅读分析（一）" /><published>2017-11-16T00:00:00+00:00</published><updated>2017-11-16T00:00:00+00:00</updated><id>/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/2017/11/16/lodash-one</id><content type="html" xml:base="/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/2017/11/16/lodash-one/">&lt;h2 id=&quot;lodashjs源码阅读分析一&quot;&gt;Lodash.js源码阅读分析（一）&lt;/h2&gt;
&lt;p&gt;通过详细阅读lodash的源码，学习代码风格同时补充基础。&lt;/p&gt;

&lt;h1 id=&quot;文章参考&quot;&gt;文章参考&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://michalbe.blogspot.sg/2013/03/javascript-less-known-parts-bitwise.html&quot;&gt;JavaScript: The less known parts&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000002608050&quot;&gt;JS 的整型你懂了吗？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;延伸阅读&quot;&gt;延伸阅读&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://yanhaijing.com/javascript/2014/03/14/what-every-javascript-developer-should-know-about-floating-points/&quot;&gt;每一个JavaScript开发者应该了解的浮点知识&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://jser.it/blog/2014/07/07/numbers-in-javascript/&quot;&gt;Numbers in JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>toshiba</name></author><category term="Lodash" /><category term="javascript" /><summary type="html">Lodash.js源码阅读分析（一） 通过详细阅读lodash的源码，学习代码风格同时补充基础。</summary></entry><entry><title type="html">SublimeText快捷键</title><link href="/%E7%94%9F%E4%BA%A7%E5%B7%A5%E5%85%B7/2017/11/15/sublime-quick/" rel="alternate" type="text/html" title="SublimeText快捷键" /><published>2017-11-15T00:00:00+00:00</published><updated>2017-11-15T00:00:00+00:00</updated><id>/%E7%94%9F%E4%BA%A7%E5%B7%A5%E5%85%B7/2017/11/15/sublime-quick</id><content type="html" xml:base="/%E7%94%9F%E4%BA%A7%E5%B7%A5%E5%85%B7/2017/11/15/sublime-quick/">&lt;h2 id=&quot;sublime-text-2---实用快捷键-mac-os-x&quot;&gt;Sublime Text 2 - 实用快捷键 (Mac OS X)&lt;/h2&gt;

&lt;h3 id=&quot;打开前往&quot;&gt;打开/前往&lt;/h3&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘T&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;前往文件&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘⌃P&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;前往项目&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘R&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;前往 method&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘⇧P&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;命令提示&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌃G&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;前往行&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌃ `&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;python 控制台&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;编辑&quot;&gt;编辑&lt;/h3&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘L&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;选择行 (重复按下将下一行加入选择)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘D&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;选择词 (重复按下时多重选择相同的词进行多重编辑)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌃⇧M&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;选择括号内的内容&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘⇧↩&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;在当前行前插入新行&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘↩&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;在当前行后插入新行&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌃⇧K&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;删除行&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘KK&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;从光标处删除至行尾&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘K⌫&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;从光标处删除至行首&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘⇧D&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;复制(多)行&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘J&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;合并(多)行&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘KU&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;改为大写&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘KL&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;改为小写&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘ /&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;注释&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘⌥ /&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;块注释&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘Y&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;恢复或重复&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘⇧V&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;粘贴并自动缩进&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌃ space&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;自动完成(重复按下选择下一个提示)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌃M&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;跳转至对应的括号&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;xmlhtml&quot;&gt;XML/HTML&lt;/h3&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘⇧A&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;选择标签内的内容&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘⌥ .&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;闭合当前标签&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;查找替换&quot;&gt;查找/替换&lt;/h3&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘F&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;查找&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘⌥F&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;替换&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘⌥G&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;查找下一个符合当前所选的内容&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘⌃G&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;查找所有符合当前所选的内容进行多重编辑&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘⇧F&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;在所有打开的文件中进行查找&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;拆分窗口标签页&quot;&gt;拆分窗口/标签页&lt;/h3&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘⌥1&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;单列&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘⌥2&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;双列&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘⌥5&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;网格 (4组)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌃[1,2,3,4]&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;焦点移动至相应组&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌃⇧[1,2,3,4]&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;将当前文件移动至相应组&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘[1,2,3…]&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;选择相应标签页&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;书签&quot;&gt;书签&lt;/h3&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘F2&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;添加/去除书签&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;F2&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;下一个书签&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⇧F2&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;前一个书签&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘⇧F2&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;清除书签&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;标记&quot;&gt;标记&lt;/h3&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘K space&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;设置标记&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘KW&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;从光标位置删除至标记&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘KA&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;从光标位置选择至标记&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘KG&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;清除标记&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name>toshiba</name></author><category term="生产工具" /><category term="IDE" /><summary type="html">Sublime Text 2 - 实用快捷键 (Mac OS X)</summary></entry><entry><title type="html">IDEA快捷键</title><link href="/%E7%94%9F%E4%BA%A7%E5%B7%A5%E5%85%B7/2017/11/15/idea-quick/" rel="alternate" type="text/html" title="IDEA快捷键" /><published>2017-11-15T00:00:00+00:00</published><updated>2017-11-15T00:00:00+00:00</updated><id>/%E7%94%9F%E4%BA%A7%E5%B7%A5%E5%85%B7/2017/11/15/idea-quick</id><content type="html" xml:base="/%E7%94%9F%E4%BA%A7%E5%B7%A5%E5%85%B7/2017/11/15/idea-quick/">&lt;h3 id=&quot;intellij-idea-for-mac-快捷键&quot;&gt;IntelliJ IDEA For Mac 快捷键&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;根据官方pdf翻译：&lt;a href=&quot;https://www.jetbrains.com/idea/docs/IntelliJIDEA_ReferenceCard_Mac.pdf&quot;&gt;https://www.jetbrains.com/idea/docs/IntelliJIDEA_ReferenceCard_Mac.pdf&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;在 IntelliJ IDEA 中有两个 Mac 版本的快捷键，一个叫做：Mac OS X，一个叫做：Mac OS X 10.5+&lt;/li&gt;
  &lt;li&gt;目前都是用：Mac OS X 10.5+&lt;/li&gt;
  &lt;li&gt;有两套的原因：&lt;a href=&quot;https://intellij-support.jetbrains.com/hc/en-us/community/posts/206159109-Updated-Mac-OS-X-keymap-Feedback-needed&quot;&gt;https://intellij-support.jetbrains.com/hc/en-us/community/posts/206159109-Updated-Mac-OS-X-keymap-Feedback-needed&lt;/a&gt;
    &lt;blockquote&gt;
      &lt;p&gt;建议将 Mac 系统中与 IntelliJ IDEA 冲突的快捷键取消或更改，不建议改 IntelliJ IDEA 的默认快捷键。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;mac键盘符号和修饰键说明&quot;&gt;Mac键盘符号和修饰键说明&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;⌘&lt;/code&gt; Command&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;⇧&lt;/code&gt; Shift&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;⌥&lt;/code&gt; Option&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;⌃&lt;/code&gt; Control&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;↩︎&lt;/code&gt; Return/Enter&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;⌫&lt;/code&gt; Delete&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;⌦&lt;/code&gt; 向前删除键（Fn+Delete）&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;↑&lt;/code&gt; 上箭头&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;↓&lt;/code&gt; 下箭头&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;←&lt;/code&gt; 左箭头&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;→&lt;/code&gt; 右箭头&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;⇞&lt;/code&gt; Page Up（Fn+↑）&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;⇟&lt;/code&gt; Page Down（Fn+↓）&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Home&lt;/code&gt; Fn + ←&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;End&lt;/code&gt; Fn + →&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;⇥&lt;/code&gt; 右制表符（Tab键）&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;⇤&lt;/code&gt; 左制表符（Shift+Tab）&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;⎋&lt;/code&gt; Escape (Esc)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;一editing编辑&quot;&gt;一、Editing（编辑）&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;Control + Space&lt;/code&gt; 基本的代码补全（补全任何类、方法、变量）&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Control + Shift + Space&lt;/code&gt; 智能代码补全（过滤器方法列表和变量的预期类型）&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Shift + Enter&lt;/code&gt; 自动结束代码，行末自动添加分号&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + P&lt;/code&gt; 显示方法的参数信息&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Control + J&lt;/code&gt; 快速查看文档&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Shift + F1&lt;/code&gt; 查看外部文档（在某些代码上会触发打开浏览器显示相关文档）&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + 鼠标放在代码上&lt;/code&gt; 显示代码简要信息&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + F1&lt;/code&gt; 在错误或警告处显示具体描述信息&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + N, Control + Enter, Control + N&lt;/code&gt; 生成代码（getter、setter、构造函数、hashCode/equals,toString）&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Control + O&lt;/code&gt; 覆盖方法（重写父类方法）&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Control + I&lt;/code&gt; 实现方法（实现接口中的方法）&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Option + T&lt;/code&gt; 包围代码（使用if..else, try..catch, for, synchronized等包围选中的代码）&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + /&lt;/code&gt; 注释/取消注释与行注释&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Option + /&lt;/code&gt; 注释/取消注释与块注释&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Option + 方向键上&lt;/code&gt; 连续选中代码块&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Option + 方向键下&lt;/code&gt; 减少当前选中的代码块&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Control + Shift + Q&lt;/code&gt; 显示上下文信息&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Option + Enter&lt;/code&gt; 显示意向动作和快速修复代码&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Option + L&lt;/code&gt; 格式化代码&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Control + Option + O&lt;/code&gt; 优化import&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Control + Option + I&lt;/code&gt; 自动缩进线&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Tab / Shift + Tab&lt;/code&gt; 缩进代码 / 反缩进代码&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + X&lt;/code&gt; 剪切当前行或选定的块到剪贴板&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + C&lt;/code&gt; 复制当前行或选定的块到剪贴板&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + V&lt;/code&gt; 从剪贴板粘贴&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Shift + V&lt;/code&gt; 从最近的缓冲区粘贴&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + D&lt;/code&gt; 复制当前行或选定的块&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Delete&lt;/code&gt; 删除当前行或选定的块的行&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Control + Shift + J&lt;/code&gt; 智能的将代码拼接成一行&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Enter&lt;/code&gt; 智能的拆分拼接的行&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Shift + Enter&lt;/code&gt; 开始新的一行&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Shift + U&lt;/code&gt; 大小写切换&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Shift + ] / Command + Shift + [&lt;/code&gt; 选择直到代码块结束/开始*   &lt;code&gt;Option + Fn + Delete&lt;/code&gt; 删除到单词的末尾&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Option + Delete&lt;/code&gt; 删除到单词的开头&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + 加号 / Command + 减号&lt;/code&gt; 展开 / 折叠代码块&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Shift + 加号&lt;/code&gt; 展开所以代码块&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Shift + 减号&lt;/code&gt; 折叠所有代码块&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + W&lt;/code&gt; 关闭活动的编辑器选项卡&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;二searchreplace查询替换&quot;&gt;二、Search/Replace（查询/替换）&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;Double Shift&lt;/code&gt; 查询任何东西&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + F&lt;/code&gt; 文件内查找&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + G&lt;/code&gt; 查找模式下，向下查找&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Shift + G&lt;/code&gt; 查找模式下，向上查找&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + R&lt;/code&gt; 文件内替换&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Shift + F&lt;/code&gt; 全局查找（根据路径）&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Shift + R&lt;/code&gt; 全局替换（根据路径）&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Shift + S&lt;/code&gt; 查询结构（Ultimate Edition 版专用，需要在Keymap中设置）&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Shift + M&lt;/code&gt; 替换结构（Ultimate Edition 版专用，需要在Keymap中设置）&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;三usage-search使用查询&quot;&gt;三、Usage Search（使用查询）&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;Option + F7 / Command + F7&lt;/code&gt; 在文件中查找用法 / 在类中查找用法&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Shift + F7&lt;/code&gt; 在文件中突出显示的用法&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Option + F7&lt;/code&gt; 显示用法&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;四compile-and-run编译和运行&quot;&gt;四、Compile and Run（编译和运行）&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;Command + F9&lt;/code&gt; 编译Project&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Shift + F9&lt;/code&gt; 编译选择的文件、包或模块&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Control + Option + R&lt;/code&gt; 弹出 Run 的可选择菜单&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Control + Option + D&lt;/code&gt; 弹出 Debug 的可选择菜单&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Control + R&lt;/code&gt; 运行&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Control + D&lt;/code&gt; 调试&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Control + Shift + R, Control + Shift + D&lt;/code&gt; 从编辑器运行上下文环境配置&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;五debugging调试&quot;&gt;五、Debugging（调试）&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;F8&lt;/code&gt; 进入下一步，如果当前行断点是一个方法，则不进入当前方法体内&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;F7&lt;/code&gt; 进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Shift + F7&lt;/code&gt; 智能步入，断点所在行上有多个方法调用，会弹出进入哪个方法&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Shift + F8&lt;/code&gt; 跳出&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Option + F9&lt;/code&gt; 运行到光标处，如果光标前有其他断点会进入到该断点&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Option + F8&lt;/code&gt; 计算表达式（可以更改变量值使其生效）&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Option + R&lt;/code&gt; 恢复程序运行，如果该断点下面代码还有断点则停在下一个断点上&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + F8&lt;/code&gt; 切换断点（若光标当前行有断点则取消断点，没有则加上断点）&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Shift + F8&lt;/code&gt; 查看断点信息&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;六navigation导航&quot;&gt;六、Navigation（导航）&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;Command + O&lt;/code&gt; 查找类文件&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Shift + O&lt;/code&gt; 查找所有类型文件、打开文件、打开目录，打开目录需要在输入的内容前面或后面加一个反斜杠&lt;code&gt;/&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Option + O&lt;/code&gt; 前往指定的变量 / 方法&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Control + 方向键左 / Control + 方向键右&lt;/code&gt; 左右切换打开的编辑tab页&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;F12&lt;/code&gt; 返回到前一个工具窗口&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Esc&lt;/code&gt; 从工具窗口进入代码文件窗口&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Shift + Esc&lt;/code&gt; 隐藏当前或最后一个活动的窗口，且光标进入代码文件窗口&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Shift + F4&lt;/code&gt; 关闭活动run/messages/find/… tab&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + L&lt;/code&gt; 在当前文件跳转到某一行的指定处&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + E&lt;/code&gt; 显示最近打开的文件记录列表&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Option + 方向键左 / Option + 方向键右&lt;/code&gt; 光标跳转到当前单词 / 中文句的左 / 右侧开头位置&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Option + 方向键左 / Command + Option + 方向键右&lt;/code&gt; 退回 / 前进到上一个操作的地方&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Shift + Delete&lt;/code&gt; 跳转到最后一个编辑的地方&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Option + F1&lt;/code&gt; 显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择(如在代码编辑窗口可以选择显示该文件的Finder)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + B / Command +  鼠标点击&lt;/code&gt; 进入光标所在的方法/变量的接口或是定义处&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Option + B&lt;/code&gt; 跳转到实现处，在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Option + Space, Command + Y&lt;/code&gt; 快速打开光标所在方法、类的定义&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Control + Shift + B&lt;/code&gt; 跳转到类型声明处&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + U&lt;/code&gt; 前往当前光标所在方法的父类的方法 / 接口定义&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Control + 方向键下 / Control + 方向键上&lt;/code&gt; 当前光标跳转到当前文件的前一个/后一个方法名位置&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + ] / Command + [&lt;/code&gt; 移动光标到当前所在代码的花括号开始/结束位置&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + F12&lt;/code&gt; 弹出当前文件结构层，可以在弹出的层上直接输入进行筛选（可用于搜索类中的方法）&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Control + H&lt;/code&gt; 显示当前类的层次结构&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Shift + H&lt;/code&gt; 显示方法层次结构&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Control + Option + H&lt;/code&gt; 显示调用层次结构&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;F2 / Shift + F2&lt;/code&gt; 跳转到下一个/上一个突出错误或警告的位置&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;F4 / Command + 方向键下&lt;/code&gt; 编辑/查看代码源&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Option + Home&lt;/code&gt; 显示到当前文件的导航条&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;F3&lt;/code&gt;选中文件/文件夹/代码行，添加/取消书签&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Option + F3&lt;/code&gt; 选中文件/文件夹/代码行，使用助记符添加/取消书签&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Control + 0...Control + 9&lt;/code&gt; 定位到对应数值的书签位置&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + F3&lt;/code&gt; 显示所有书签&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;七refactoring重构&quot;&gt;七、Refactoring（重构）&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;F5&lt;/code&gt; 复制文件到指定目录&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;F6&lt;/code&gt; 移动文件到指定目录&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Delete&lt;/code&gt; 在文件上为安全删除文件，弹出确认框&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Shift + F6&lt;/code&gt; 重命名文件&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + F6&lt;/code&gt; 更改签名&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Option + N&lt;/code&gt; 一致性&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Option + M&lt;/code&gt; 将选中的代码提取为方法&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Option + V&lt;/code&gt; 提取变量&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Option + F&lt;/code&gt; 提取字段&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Option + C&lt;/code&gt; 提取常量&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Option + P&lt;/code&gt; 提取参数&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;八vcslocal-history版本控制本地历史记录&quot;&gt;八、VCS/Local History（版本控制/本地历史记录）&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;Command + K&lt;/code&gt; 提交代码到版本控制器&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + T&lt;/code&gt; 从版本控制器更新代码&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Option + Shift + C&lt;/code&gt; 查看最近的变更记录&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Control + C&lt;/code&gt; 快速弹出版本控制器操作面板&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;九live-templates动态代码模板&quot;&gt;九、Live Templates（动态代码模板）&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;Command + Option + J&lt;/code&gt; 弹出模板选择窗口，将选定的代码使用动态模板包住&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + J&lt;/code&gt; 插入自定义动态代码模板&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;十general通用&quot;&gt;十、General（通用）&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;Command + 1...Command + 9&lt;/code&gt; 打开相应编号的工具窗口&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + S&lt;/code&gt; 保存所有&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Option + Y&lt;/code&gt; 同步、刷新&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Control + Command + F&lt;/code&gt; 切换全屏模式&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Shift + F12&lt;/code&gt; 切换最大化编辑器&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Option + Shift + F&lt;/code&gt; 添加到收藏夹&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Option + Shift + I&lt;/code&gt; 检查当前文件与当前的配置文件&lt;/li&gt;
  &lt;li&gt;Control + ` 快速切换当前的scheme（切换主题、代码样式等）&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + ,&lt;/code&gt; 打开IDEA系统设置&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + ;&lt;/code&gt; 打开项目结构对话框&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Shift + Command + A&lt;/code&gt; 查找动作（可设置相关选项）&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Control + Shift + Tab&lt;/code&gt; 编辑窗口标签和工具窗口之间切换（如果在切换的过程加按上delete，则是关闭对应选中的窗口）&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;十一other一些官方文档上没有体现的快捷键&quot;&gt;十一、Other（一些官方文档上没有体现的快捷键）&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;Command + Shift +8&lt;/code&gt; 竖编辑模式&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;参考文章&quot;&gt;参考文章&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://wiki.jikexueyuan.com/project/intellij-idea-tutorial/keymap-mac-introduce.html&quot;&gt;IntelliJ IDEA For Mac 快捷键&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>toshiba</name></author><category term="生产工具" /><category term="IDE" /><summary type="html">IntelliJ IDEA For Mac 快捷键</summary></entry><entry><title type="html">Visual Studio快捷键</title><link href="/%E7%94%9F%E4%BA%A7%E5%B7%A5%E5%85%B7/2017/11/15/quick-key/" rel="alternate" type="text/html" title="Visual Studio快捷键" /><published>2017-11-15T00:00:00+00:00</published><updated>2017-11-15T00:00:00+00:00</updated><id>/%E7%94%9F%E4%BA%A7%E5%B7%A5%E5%85%B7/2017/11/15/quick-key</id><content type="html" xml:base="/%E7%94%9F%E4%BA%A7%E5%B7%A5%E5%85%B7/2017/11/15/quick-key/">&lt;h3 id=&quot;工欲善其事必先利其器快捷键总结&quot;&gt;工欲善其事必先利其器快捷键总结&lt;/h3&gt;

&lt;h3 id=&quot;项目相关的快捷键&quot;&gt;项目相关的快捷键&lt;/h3&gt;

&lt;p&gt;Ctrl + Shift + B = 生成项目&lt;/p&gt;

&lt;p&gt;Ctrl + Alt + L = 显示Solution Explorer（解决方案资源管理器）&lt;/p&gt;

&lt;p&gt;Shift + Alt+ C = 添加新类&lt;/p&gt;

&lt;p&gt;Shift + Alt + A = 添加新项目到项目&lt;/p&gt;

&lt;h3 id=&quot;编辑相关的键盘快捷键&quot;&gt;编辑相关的键盘快捷键&lt;/h3&gt;

&lt;p&gt;Ctrl + Enter = 在当前行插入空行&lt;/p&gt;

&lt;p&gt;Ctrl + Shift + Enter = 在当前行下方插入空行&lt;/p&gt;

&lt;p&gt;Ctrl +空格键 = 使用IntelliSense（智能感知）自动完成&lt;/p&gt;

&lt;p&gt;Alt + Shift +箭头键(←,↑,↓,→) = 选择代码的自定义部分&lt;/p&gt;

&lt;p&gt;Ctrl + } = 匹配大括号、括号&lt;/p&gt;

&lt;p&gt;Ctrl + Shift +} = 在匹配的括号、括号内选择文本&lt;/p&gt;

&lt;p&gt;Ctrl + Shift + S = 保存所有文件和项目&lt;/p&gt;

&lt;p&gt;Ctrl + K，Ctrl + C = 注释选定行&lt;/p&gt;

&lt;p&gt;Ctrl + K，Ctrl + U = 取消选定行的注释&lt;/p&gt;

&lt;p&gt;Ctrl + K，Ctrl + D = 正确对齐所有代码&lt;/p&gt;

&lt;p&gt;Shift + End = 从头到尾选择整行&lt;/p&gt;

&lt;p&gt;Shift + Home = 从尾到头选择整行&lt;/p&gt;

&lt;p&gt;Ctrl + Delete = 删除光标右侧的所有字&lt;/p&gt;

&lt;h3 id=&quot;导航相关的键盘快捷键&quot;&gt;导航相关的键盘快捷键&lt;/h3&gt;

&lt;p&gt;Ctrl +Up/Down = 滚动窗口但不移动光标&lt;/p&gt;

&lt;p&gt;Ctrl + - = 让光标移动到它先前的位置&lt;/p&gt;

&lt;p&gt;Ctrl ++ = 让光标移动到下一个位置&lt;/p&gt;

&lt;p&gt;F12 = 转到定义&lt;/p&gt;

&lt;h3 id=&quot;调试相关的键盘快捷键&quot;&gt;调试相关的键盘快捷键&lt;/h3&gt;

&lt;p&gt;Ctrl + Alt + P = 附加到进程&lt;/p&gt;

&lt;p&gt;F10 = 调试单步执行&lt;/p&gt;

&lt;p&gt;F5 = 开始调试&lt;/p&gt;

&lt;p&gt;Shift + F5 = 停止调试&lt;/p&gt;

&lt;p&gt;Ctrl + Alt + Q = 添加快捷匹配&lt;/p&gt;

&lt;p&gt;F9 = 设置或删除断点&lt;/p&gt;

&lt;h3 id=&quot;搜索相关的键盘快捷键&quot;&gt;搜索相关的键盘快捷键&lt;/h3&gt;

&lt;p&gt;Ctrl + K  Ctrl + K = 将当前行添加书签&lt;/p&gt;

&lt;p&gt;Ctrl + K  Ctrl + N = 导航至下一个书签&lt;/p&gt;

&lt;p&gt;Ctrl + . = 如果你键入一个类名如Collection&lt;string&gt;，且命名空间导入不正确的话，那么这个快捷方式组合将自动插入导入&lt;/string&gt;&lt;/p&gt;

&lt;p&gt;Ctrl + Shift + F = 在文件中查找&lt;/p&gt;

&lt;p&gt;Shift  + F12 = 查找所有引用&lt;/p&gt;

&lt;p&gt;Ctrl + F = 显示查找对话框&lt;/p&gt;

&lt;p&gt;Ctrl + H = 显示替换对话框&lt;/p&gt;

&lt;p&gt;Ctrl + G = 跳转到行号或行&lt;/p&gt;

&lt;p&gt;Ctrl + Shift + F = 查找所选条目在整个解决方案中的引用&lt;/p&gt;

&lt;h3 id=&quot;參考文章&quot;&gt;參考文章&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://msdn.microsoft.com/zh-cn/library/dn320181.aspx&quot; alt=&quot;Visual Studio 的提示和技巧&quot; /&gt;&lt;/p&gt;</content><author><name>toshiba</name></author><category term="生产工具" /><category term="IDE" /><summary type="html">工欲善其事必先利其器快捷键总结</summary></entry><entry><title type="html">javascript的查漏补缺</title><link href="/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/2017/11/01/js-base/" rel="alternate" type="text/html" title="javascript的查漏补缺" /><published>2017-11-01T00:00:00+00:00</published><updated>2017-11-01T00:00:00+00:00</updated><id>/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/2017/11/01/js-base</id><content type="html" xml:base="/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/2017/11/01/js-base/">&lt;h2 id=&quot;js-中的最大安全整数&quot;&gt;JS 中的最大安全整数&lt;/h2&gt;
&lt;p&gt;JS中所有的数字类型存储都是&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E9%9B%99%E7%B2%BE%E5%BA%A6%E6%B5%AE%E9%BB%9E%E6%95%B8&quot;&gt;双精度浮点数&lt;/a&gt;浮点数并不是能够精确表示范围内的所有数的， 虽然 double 浮点型的范围看上去很大: 2.23x10^(-308) ~ 1.79x10^308。 可以表示的最大整数可以很大，但能够精确表示，使用算数运算的并没有这么大。&lt;/p&gt;

&lt;p&gt;例如下面会报错&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;console.log(0.1 + 0.2)
//output: 0.30000000000000004

//在js中的最大安全整数
Math.pow(2, 53) - 1     // 9007199254740991

//在其他语言的64位环境中有符号的 安全（注意这里是指能够安全使用，进行算数运算的范围） 最大整数。
2^63 - 1;//9223372036854775807


//JS 的最大和最小安全值可以这样获得:
console.log(Number.MAX_SAFE_INTEGER); //9007199254740991
console.log(Number.MIN_SAFE_INTEGER); //-9007199254740991


//通过下面的例子，你会明白为什么大于这个值的运算是不安全的,这些运算都是错误的结果， 因为它们进行的都是浮点数运算会丢失精度。

var x = 9223372036854775807;
console.log(x === x + 1);// output: true
console.log(9223372036854775807 + 1000); //output: 9223372036854776000

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;为什么是这个值&quot;&gt;为什么是这个值?&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://darknights.b0.upaiyun.com/assets/images/in-post/js-base/number.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;1 位符号位&lt;/li&gt;
  &lt;li&gt;11 位指数位&lt;/li&gt;
  &lt;li&gt;52 位尾数位&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;使用 52 位表示一个数的整数部分，那么最大可以精确表示的数应该是 2^52 - 1 才对， 就像 64 位表示整数时那样: 2^63 - 1 （去掉 1 位符号位）。 但其实浮点数在保存数字的时候做了规格化处理，以 10 进制为例:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;20*10^2 =&amp;gt; 2*10^3 //小数点前只需要保留 1 位数

对于二进制来说， 小数点前保留一位， 规格化后始终是 1.***, 节省了 1 bit，这个 1 并不需要保存。


## 大整数与数据库
Nodejs 越来越多的应用到后端的开发中， 不可避免的需要处理这样的溢出问题， 好在已经有很多优秀的第三方库来解决该问题：bignum、bigint。


&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;//每种类型的第二行为无符号范围
TYPE         BYTE   MIN            MAX
TINYINT      1     -128            127
                                   255
SMALLINT     2    -32768          32767
                                  65535
MEDIUMINT    3    -8388608       8388607
                                 16777215
INT          4   -2147483648    2147483647
                                4294967295
BIGINT       8  -9223372036854775808    9223372036854775807
                                       18446744073709551615&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;BIGINT 就是 64 位整数， 一旦要处理的数据量超过了 BIGINT 能存储的范围，便要考虑使用字符串保存， 坏处是数字的算数运算需要通过应用程序使用大整数库来处理，不能依赖于数据库。

注: 常常看到 BIGINT(5) 或者 INT(10)， 括号里的 5 或 10 只是表示展示宽度，并不影响数的精度范围和存储字节数，需要与 VARCHAR(100)或 DECIMAL(10,2)区分开




## JS右移0位
在Javascript代码有时候会看到this.length &amp;gt;&amp;gt; 0这样的类似代码，那么this.length &amp;gt;&amp;gt; 0这样的代码有什么用呢？
* &amp;gt;&amp;gt;代表有符号右移运算符 === 算术右移
* &amp;gt;&amp;gt;&amp;gt;在Javascript中代表无符号右移运算符 === 逻辑右移
移位运算分为左移和右移，其中左移运算都是丢弃最高位，在右端补零。而右移预算则分为逻辑右移&amp;lt;code&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;lt;/code&amp;gt;和算术右移动&amp;lt;code&amp;gt;&amp;gt;&amp;gt;&amp;lt;/code&amp;gt;，逻辑右移在左端补零，算术右移则在左端扑最高有效位的值。

&amp;lt;code&amp;gt;this.length &amp;gt;&amp;gt; 0&amp;lt;/code&amp;gt;的作用更简易的总结：

* 所有非数值转换成0
* 所有大于等于 0 数取整数部分（快速去掉小数）
例：
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;‘hello’ » 0  // 0
32.5 » 0  // 32
```&lt;/p&gt;

&lt;h1 id=&quot;文章参考&quot;&gt;文章参考&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://michalbe.blogspot.sg/2013/03/javascript-less-known-parts-bitwise.html&quot;&gt;JavaScript: The less known parts&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000002608050&quot;&gt;JS 的整型你懂了吗？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;延伸阅读&quot;&gt;延伸阅读&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://yanhaijing.com/javascript/2014/03/14/what-every-javascript-developer-should-know-about-floating-points/&quot;&gt;每一个JavaScript开发者应该了解的浮点知识&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://jser.it/blog/2014/07/07/numbers-in-javascript/&quot;&gt;Numbers in JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>toshiba</name></author><category term="计算机基础" /><category term="javascript" /><summary type="html">JS 中的最大安全整数 JS中所有的数字类型存储都是双精度浮点数浮点数并不是能够精确表示范围内的所有数的， 虽然 double 浮点型的范围看上去很大: 2.23x10^(-308) ~ 1.79x10^308。 可以表示的最大整数可以很大，但能够精确表示，使用算数运算的并没有这么大。</summary></entry><entry><title type="html">javascript的位操作</title><link href="/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/2017/11/01/bin-operate/" rel="alternate" type="text/html" title="javascript的位操作" /><published>2017-11-01T00:00:00+00:00</published><updated>2017-11-01T00:00:00+00:00</updated><id>/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/2017/11/01/bin-operate</id><content type="html" xml:base="/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/2017/11/01/bin-operate/">&lt;h1 id=&quot;关于javascript中的操作&quot;&gt;关于javascript中的~操作&lt;/h1&gt;

&lt;p&gt;参考文章中有一道面试题,尽管文章已经有了一部分解释但是还有一些点不够明确在此在进行一次分析&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;!~location.href.search(‘abc’)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;首先再次回顾一下js中的位运算&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&amp;amp; 与&lt;/li&gt;
  &lt;li&gt;| 或&lt;/li&gt;
  &lt;li&gt;~ 非&lt;/li&gt;
  &lt;li&gt;^ 异或&lt;/li&gt;
  &lt;li&gt;&amp;lt;&amp;lt; 左移&lt;/li&gt;
  &lt;li&gt;&amp;gt;&amp;gt; 算数右移(有符号右移)&lt;/li&gt;
  &lt;li&gt;&amp;gt;&amp;gt;&amp;gt; 逻辑右移(无符号右移)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Number.prototype.toString&lt;/p&gt;

&lt;p&gt;Number.prototype.toString方法可以讲数字转化为字符串，有一个可选的参数，用来决定将数字显示为指定的进制，下面可以查看3的二进制表示&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-`&quot;&gt; 3..toString(2)

 (3).toString(2)

 Number(3).toString(2)   //这里如果直接 3.toString(2)是会报错的

  &amp;gt;&amp;gt; 11
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;-与&quot;&gt;&amp;amp; 与&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;&amp;amp;按位与会将操作数和被操作数的相同为进行与运算，如果都为1则为1，如果有一个为0则为0&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;101
011
---
001
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;-或&quot;&gt;| 或&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;按位或是相同的位置上只要有一个为1就是1，两个都为0则为0&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;101
001
---
101
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;-非&quot;&gt;~ 非&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;~操作符会将操作数的每一位取反，如果是1则变为0，如果是0则边为1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;101
---
010
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;-异或&quot;&gt;^ 异或&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;再来说说异或，这个比较有意思，异或顾名思义看看两个位是否为异——不同，两个位不同则为1，两个位相同则为0&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;101
001
---
100
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;再次分析开头的问题&lt;/p&gt;

&lt;p&gt;首先关于indexOf获得的值可能有几种请求 -1,0,1 从这三种进行分析&lt;/p&gt;

&lt;h2 id=&quot;-1&quot;&gt;~-1&lt;/h2&gt;

&lt;p&gt;为了简便计算我这只取8位&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;10000001  //这是-1的原码 (真值的绝对值加上符号位)
--------  //进行按位非操作后 这里会改变符号
01111110  //得到此值为正值要获得该值得真值需要然后取反再减一 注意取反的操作不会改变符号
--------
00000000  //最后得到的值是0

//浏览器控制台输出

~-1
0

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;0&quot;&gt;~0&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;00000000  //这是0的原码 (真值的绝对值加上符号位)
--------  //进行按位非操作后 这里会改变符号
11111111  //得到此值该值为负值的补码 要获得该值得真值需要对补码求补即取反+1 (注意取反的操作不会改变符号)
--------
10000001  //最后得到的值是1

//浏览器控制台输出

~0
-1

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;1&quot;&gt;~1&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;00000001  //这是1的原码 (真值的绝对值加上符号位)
--------  //进行按位非操作后 这里会改变符号
11111110  //得到此值该值为负值的补码 要获得该值得真值需要对补码求补即取反+1 (注意取反的操作不会改变符号)
--------
10000010  //最后得到的值是2

//浏览器控制台输出

~1
-2

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;因此在上面问题出现的时候&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~location.href.search('abc')  //未匹配到返回 -1 这里为 ~-1  == 0 ==&amp;gt; !0 == true;
~location.href.search('abc')  //未匹配到返回 0 这里为 ~0  == -1 ==&amp;gt; !-1 == false;
~location.href.search('abc')  //未匹配到返回 1 这里为 ~1  == -2 ==&amp;gt; !-2== false;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;因此只有返回 -1时&lt;/p&gt;

&lt;p&gt;如果为 -1 说明未匹配到&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;!~location.href.search(‘abc’) ===&amp;gt; true&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;得证。&lt;/p&gt;

&lt;h1 id=&quot;文章参考&quot;&gt;文章参考&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://yanhaijing.com/javascript/2016/07/20/binary-in-js/&quot;&gt;聊聊JavaScript中的二进制数&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/zhangziqiu/archive/2011/03/30/ComputerCode.html&quot;&gt;原码, 反码, 补码 详解&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;延伸阅读&quot;&gt;延伸阅读&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://yanhaijing.com/javascript/2014/03/14/what-every-javascript-developer-should-know-about-floating-points/&quot;&gt;每一个JavaScript开发者应该了解的浮点知识&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://jser.it/blog/2014/07/07/numbers-in-javascript/&quot;&gt;Numbers in JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>toshiba</name></author><category term="计算机基础" /><category term="javascript" /><summary type="html">关于javascript中的~操作</summary></entry><entry><title type="html">原码, 反码, 补码 详解</title><link href="/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/2017/10/31/bin-calculate/" rel="alternate" type="text/html" title="原码, 反码, 补码 详解" /><published>2017-10-31T00:00:00+00:00</published><updated>2017-10-31T00:00:00+00:00</updated><id>/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/2017/10/31/bin-calculate</id><content type="html" xml:base="/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/2017/10/31/bin-calculate/">&lt;h1 id=&quot;机器数和真值&quot;&gt;机器数和真值&lt;/h1&gt;
&lt;p&gt;在学习原码, 反码和补码之前, 需要先了解机器数和真值的概念.&lt;/p&gt;

&lt;h2 id=&quot;机器数&quot;&gt;机器数&lt;/h2&gt;
&lt;p&gt;一个数在计算机中的二进制表示形式,  叫做这个数的机器数。机器数是带符号的，在计算机用一个数的最高位存放符号, 正数为0, 负数为1.&lt;/p&gt;

&lt;p&gt;比如，十进制中的数 +3 ，计算机字长为8位，转换成二进制就是00000011。如果是 -3 ，就是 10000011 。&lt;/p&gt;

&lt;p&gt;那么，这里的 00000011 和 10000011 就是机器数。&lt;/p&gt;

&lt;h2 id=&quot;真值&quot;&gt;真值&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;因为第一位是符号位，所以机器数的形式值就不等于真正的数值。例如上面的有符号数 10000011，其最高位1代表负，其真正数值是 -3 而不是形式值131?&amp;gt;（10000011转换成十进制等于131）。所以，为区别起见，将带符号位的机器数对应的真正数值称为机器数的真值。
例：0000 0001的真值 = +000 0001 = +1，1000 0001的真值 = –000 0001 = –1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;原码-反码-补码的基础概念和计算方法&quot;&gt;原码, 反码, 补码的基础概念和计算方法&lt;/h1&gt;

&lt;p&gt;在探求为何机器要使用补码之前, 让我们先了解原码, 反码和补码的概念.对于一个数, 计算机要使用一定的编码方式进行存储. 原码, 反码, 补码是机器存储一个具体数字的编码方式.&lt;/p&gt;

&lt;h2 id=&quot;原码&quot;&gt;原码&lt;/h2&gt;

&lt;p&gt;原码就是符号位加上真值的绝对值, 即用第一位表示符号, 其余位表示值. 比如如果是8位二进制:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;[+1]原 = 0000 0001&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;[-1]原 = 1000 0001&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;第一位是符号位. 因为第一位是符号位, 所以8位二进制数的取值范围就是:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;[1111 1111 , 0111 1111] 即 [-127 , 127]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;原码是人脑最容易理解和计算的表示方式.&lt;/p&gt;

&lt;h2 id=&quot;反码&quot;&gt;反码&lt;/h2&gt;

&lt;p&gt;反码的表示方法是:&lt;/p&gt;

&lt;p&gt;正数的反码是其本身&lt;/p&gt;

&lt;p&gt;负数的反码是在其原码的基础上, 符号位不变，其余各个位取反.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;[+1] = [00000001]原 = [00000001]反&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;[-1] = [10000001]原 = [11111110]反&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;可见如果一个反码表示的是负数, 人脑无法直观的看出来它的数值. 通常要将其转换成原码再计算.&lt;/p&gt;

&lt;h2 id=&quot;补码&quot;&gt;补码&lt;/h2&gt;

&lt;p&gt;补码的表示方法是:&lt;/p&gt;

&lt;p&gt;正数的补码就是其本身&lt;/p&gt;

&lt;p&gt;负数的补码是在其原码的基础上, 符号位不变, 其余各位取反, 最后+1. (即在反码的基础上+1)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;[+1] = [00000001]原 = [00000001]反 = [00000001]补&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;[-1] = [10000001]原 = [11111110]反 = [11111111]补&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;对于负数, 补码表示方式也是人脑无法直观看出其数值的. 通常也需要转换成原码在计算其数值.&lt;/p&gt;

&lt;h1 id=&quot;为何要使用原码-反码和补码&quot;&gt;为何要使用原码, 反码和补码&lt;/h1&gt;

&lt;p&gt;在开始深入学习前, 我的学习建议是先”死记硬背”上面的原码, 反码和补码的表示方式以及计算方法.&lt;/p&gt;

&lt;p&gt;现在我们知道了计算机可以有三种编码方式表示一个数. 对于正数因为三种编码方式的结果都相同:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;[+1] = [00000001]原 = [00000001]反 = [00000001]补&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;所以不需要过多解释. 但是对于负数:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;[-1] = [10000001]原 = [11111110]反 = [11111111]补&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;可见原码, 反码和补码是完全不同的. 既然原码才是被人脑直接识别并用于计算表示方式, 为何还会有反码和补码呢?&lt;/p&gt;

&lt;p&gt;首先, 因为人脑可以知道第一位是符号位, 在计算的时候我们会根据符号位, 选择对真值区域的加减. (真值的概念在本文最开头). 但是对于计算机, 加减乘数已经是最基础的运算, 要设计的尽量简单. 计算机辨别”符号位”显然会让计算机的基础电路设计变得十分复杂! 于是人们想出了将符号位也参与运算的方法. 我们知道, 根据运算法则减去一个正数等于加上一个负数, 即: 1-1 = 1 + (-1) = 0 , 所以机器可以只有加法而没有减法, 这样计算机运算的设计就更简单了.&lt;/p&gt;

&lt;p&gt;于是人们开始探索 将符号位参与运算, 并且只保留加法的方法. 首先来看原码:&lt;/p&gt;

&lt;p&gt;计算十进制的表达式: 1-1=0&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;1 - 1 = 1 + (-1) = [00000001]原 + [10000001]原 = [10000010]原 = -2&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如果用原码表示, 让符号位也参与计算, 显然对于减法来说, 结果是不正确的.这也就是为何计算机内部不使用原码表示一个数.&lt;/p&gt;

&lt;p&gt;为了解决原码做减法的问题, 出现了反码:&lt;/p&gt;

&lt;p&gt;计算十进制的表达式: 1-1=0&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;1 - 1 = 1 + (-1) = [0000 0001]原 + [1000 0001]原= [0000 0001]反 + [1111 1110]反 = [1111 1111]反 = [1000 0000]原 = -0&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;发现用反码计算减法, 结果的真值部分是正确的. 而唯一的问题其实就出现在”0”这个特殊的数值上. 虽然人们理解上+0和-0是一样的, 但是0带符号是没有任何意义的. 而且会有[0000 0000]原和[1000 0000]原两个编码表示0.&lt;/p&gt;

&lt;p&gt;于是补码的出现, 解决了0的符号以及两个编码的问题:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;1-1 = 1 + (-1) = [0000 0001]原 + [1000 0001]原 = [0000 0001]补 + [1111 1111]补 = [0000 0000]补=[0000 0000]原&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这样0用[0000 0000]表示, 而以前出现问题的-0则不存在了.而且可以用[1000 0000]表示-128:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;(-1) + (-127) = [1000 0001]原 + [1111 1111]原 = [1111 1111]补 + [1000 0001]补 = [1000 0000]补&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;-1-127的结果应该是-128, 在用补码运算的结果中, [1000 0000]补 就是-128. 但是注意因为实际上是使用以前的-0的补码来表示-128, 所以-128并没有原码和反码表示.(对-128的补码表示[1000 0000]补算出来的原码是[0000 0000]原, 这是不正确的)&lt;/p&gt;

&lt;p&gt;使用补码, 不仅仅修复了0的符号以及存在两个编码的问题, 而且还能够多表示一个最低数. 这就是为什么8位二进制, 使用原码或反码表示的范围为[-127, +127], 而使用补码表示的范围为[-128, 127].&lt;/p&gt;

&lt;p&gt;因为机器使用补码, 所以对于编程中常用到的32位int类型, 可以表示范围是: [-231, 231-1] 因为第一位表示的是符号位.而使用补码表示时又可以多保存一个最小值.&lt;/p&gt;

&lt;h1 id=&quot;文章参考&quot;&gt;文章参考&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://yanhaijing.com/javascript/2016/07/20/binary-in-js/&quot;&gt;聊聊JavaScript中的二进制数&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/zhangziqiu/archive/2011/03/30/ComputerCode.html&quot;&gt;原码, 反码, 补码 详解&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;延伸阅读&quot;&gt;延伸阅读&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://yanhaijing.com/javascript/2014/03/14/what-every-javascript-developer-should-know-about-floating-points/&quot;&gt;每一个JavaScript开发者应该了解的浮点知识&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>toshiba</name></author><category term="基础知识" /><summary type="html">机器数和真值 在学习原码, 反码和补码之前, 需要先了解机器数和真值的概念.</summary></entry><entry><title type="html">常用的后台管理主题模板</title><link href="/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/2017/10/31/admin-theme/" rel="alternate" type="text/html" title="常用的后台管理主题模板" /><published>2017-10-31T00:00:00+00:00</published><updated>2017-10-31T00:00:00+00:00</updated><id>/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/2017/10/31/admin-theme</id><content type="html" xml:base="/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/2017/10/31/admin-theme/">&lt;h2 id=&quot;常用后台管理主题推荐&quot;&gt;常用后台管理主题推荐&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;jQuey: &lt;a href=&quot;http://www.bootcss.com/&quot;&gt;Bootstrap&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;React: &lt;a href=&quot;https://ant.design/index-cn&quot;&gt;ant.design&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Vue: &lt;a href=&quot;http://element.eleme.io/#/zh-CN/component/layout&quot;&gt;Element&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;个人感觉基于bootstrap的管理模板都大同小异参考文章中的内容基本可以满足需求推荐以下免费主题供大家参考&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://thetheme.io/theadmin/&quot;&gt;thetheme.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://flatfull.com/themes/flatkit/angular/#/app/dashboard&quot;&gt;flatfull.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://wrappixel.com/demos/free-admin-templates/matrix-admin/index.html&quot;&gt;matrix-admin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://demo.thedevelovers.com/dashboard/klorofil-v2.0/icons.html&quot;&gt;KLOROFIL&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://adminlte.io/themes/AdminLTE/pages/UI/sliders.html&quot;&gt;adminlte.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://wrappixel.com/demos/admin-templates/pixeladmin/inverse/index.html&quot;&gt;pixeladmin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://akveo.com/blur-admin-mint/#/tables/basic&quot;&gt;akveo 这个挺快&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://akveo.com/ngx-admin/#/pages/dashboard&quot;&gt;ngx-admin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;参考文章&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;https://colorlib.com/wp/free-bootstrap-admin-dashboard-templates/&quot;&gt;20 Free Bootstrap 3 Admin Dashboard Templates For Your Web App 2017&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://elements.envato.com/web-templates/admin-templates&quot;&gt;admin templates&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://athemes.com/collections/free-bootstrap-admin-templates/&quot;&gt;20 Best Free Bootstrap Admin Templates 2017&lt;/a&gt;
&lt;a href=&quot;https://cssauthor.com/bootstrap-admin-templates/&quot;&gt;100+ Best Free Bootstrap Admin Templates&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;</content><author><name>toshiba</name></author><category term="html" /><category term="管理系统主题" /><summary type="html">常用后台管理主题推荐</summary></entry><entry><title type="html">娱乐</title><link href="/%E5%A8%B1%E4%B9%90/2017/10/29/entertainment/" rel="alternate" type="text/html" title="娱乐" /><published>2017-10-29T00:00:00+00:00</published><updated>2017-10-29T00:00:00+00:00</updated><id>/%E5%A8%B1%E4%B9%90/2017/10/29/entertainment</id><content type="html" xml:base="/%E5%A8%B1%E4%B9%90/2017/10/29/entertainment/">&lt;h2 id=&quot;justfun&quot;&gt;justfun&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.btbtdy.com/&quot;&gt;BT电影天堂&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://wall.alphacoders.com/by_collection.php?id=39&amp;amp;lang=Chinese&amp;amp;page=1&quot;&gt;壁纸&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://axhub.im/&quot;&gt;原型发布与管理工具&lt;/a&gt;&lt;/p&gt;</content><author><name>toshiba</name></author><category term="娱乐" /><summary type="html">justfun</summary></entry></feed>