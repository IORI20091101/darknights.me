<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="http://jekyllrb.com" version="3.4.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2018-03-12T10:21:58+00:00</updated><id>/</id><subtitle>Dark knight's的个人技术博客,专注于web开发,追求前端最完美体验</subtitle><entry><title type="html">Css布局研究之Flex布局总结（一）</title><link href="/css/2017/12/25/css-layout/" rel="alternate" type="text/html" title="Css布局研究之Flex布局总结（一）" /><published>2017-12-25T00:00:00+00:00</published><updated>2017-12-25T00:00:00+00:00</updated><id>/css/2017/12/25/css-layout</id><content type="html" xml:base="/css/2017/12/25/css-layout/">&lt;h2 id=&quot;flex布局&quot;&gt;Flex布局&lt;/h2&gt;

&lt;h1 id=&quot;文章参考&quot;&gt;文章参考&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2015/07/flex-examples.html&quot;&gt;Flex 布局教程：实例篇&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>toshiba</name></author><category term="Flex - Css布局" /><summary type="html">Flex布局</summary></entry><entry><title type="html">除涉Android</title><link href="/android/2017/12/20/android-start/" rel="alternate" type="text/html" title="除涉Android" /><published>2017-12-20T00:00:00+00:00</published><updated>2017-12-20T00:00:00+00:00</updated><id>/android/2017/12/20/android-start</id><content type="html" xml:base="/android/2017/12/20/android-start/">&lt;h2 id=&quot;android环境安装&quot;&gt;Android环境安装&lt;/h2&gt;

&lt;h1 id=&quot;文章参考&quot;&gt;文章参考&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.androiddevtools.cn/&quot;&gt;AndroidDevTools&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>toshiba</name></author><category term="Android" /><summary type="html">Android环境安装</summary></entry><entry><title type="html">解读V8 GC</title><link href="/node.js/2017/12/20/node-gc/" rel="alternate" type="text/html" title="解读V8 GC" /><published>2017-12-20T00:00:00+00:00</published><updated>2017-12-20T00:00:00+00:00</updated><id>/node.js/2017/12/20/node-gc</id><content type="html" xml:base="/node.js/2017/12/20/node-gc/">&lt;h2 id=&quot;lodashjs源码阅读分析一&quot;&gt;Lodash.js源码阅读分析（一）&lt;/h2&gt;
&lt;p&gt;通过详细阅读lodash的源码，学习代码风格同时补充基础。&lt;/p&gt;

&lt;h1 id=&quot;文章参考&quot;&gt;文章参考&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://alinode.aliyun.com/blog/37&quot;&gt;Node.js 应用背景与 GC 基础知识&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://v8project.blogspot.co.uk/&quot;&gt;V8 JavaScript Engine&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>toshiba</name></author><category term="javascript" /><category term="Node.js" /><summary type="html">Lodash.js源码阅读分析（一） 通过详细阅读lodash的源码，学习代码风格同时补充基础。</summary></entry><entry><title type="html">前端构建工具fit&amp;amp;webpack</title><link href="/%E5%89%8D%E7%AB%AF%E6%9E%B6%E6%9E%84/2017/11/23/fit-webpack/" rel="alternate" type="text/html" title="前端构建工具fit&amp;webpack" /><published>2017-11-23T00:00:00+00:00</published><updated>2017-11-23T00:00:00+00:00</updated><id>/%E5%89%8D%E7%AB%AF%E6%9E%B6%E6%9E%84/2017/11/23/fit-webpack</id><content type="html" xml:base="/%E5%89%8D%E7%AB%AF%E6%9E%B6%E6%9E%84/2017/11/23/fit-webpack/">&lt;h2 id=&quot;lodashjs源码阅读分析一&quot;&gt;Lodash.js源码阅读分析（一）&lt;/h2&gt;
&lt;p&gt;通过详细阅读lodash的源码，学习代码风格同时补充基础。&lt;/p&gt;

&lt;h1 id=&quot;文章参考&quot;&gt;文章参考&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/camsong/blog/issues/2&quot;&gt;Ajax已死，fetch永生&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>toshiba</name></author><category term="webpack" /><category term="前端构建工具" /><summary type="html">Lodash.js源码阅读分析（一） 通过详细阅读lodash的源码，学习代码风格同时补充基础。</summary></entry><entry><title type="html">放弃ajax拥抱fetch</title><link href="/js%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/2017/11/23/ajax-fetch/" rel="alternate" type="text/html" title="放弃ajax拥抱fetch" /><published>2017-11-23T00:00:00+00:00</published><updated>2017-11-23T00:00:00+00:00</updated><id>/js%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/2017/11/23/ajax-fetch</id><content type="html" xml:base="/js%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/2017/11/23/ajax-fetch/">&lt;h2 id=&quot;lodashjs源码阅读分析一&quot;&gt;Lodash.js源码阅读分析（一）&lt;/h2&gt;
&lt;p&gt;通过详细阅读lodash的源码，学习代码风格同时补充基础。&lt;/p&gt;

&lt;h1 id=&quot;文章参考&quot;&gt;文章参考&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/camsong/blog/issues/2&quot;&gt;Ajax已死，fetch永生&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>toshiba</name></author><category term="ES6学习笔记" /><category term="javascript" /><summary type="html">Lodash.js源码阅读分析（一） 通过详细阅读lodash的源码，学习代码风格同时补充基础。</summary></entry><entry><title type="html">vps各种玩法</title><link href="/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/2017/11/23/vps-func/" rel="alternate" type="text/html" title="vps各种玩法" /><published>2017-11-23T00:00:00+00:00</published><updated>2017-11-23T00:00:00+00:00</updated><id>/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/2017/11/23/vps-func</id><content type="html" xml:base="/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/2017/11/23/vps-func/">&lt;h2 id=&quot;vps各种玩法&quot;&gt;vps各种玩法&lt;/h2&gt;

&lt;h1 id=&quot;文章参考&quot;&gt;文章参考&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://jecvay.com/2015/01/learning-vps-3.html&quot;&gt;vps各种玩法&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.lichanglin.cn/%E5%88%A9%E7%94%A8vps%E6%90%AD%E5%BB%BABT%E7%A6%BB%E7%BA%BF%E4%B8%8B%E8%BD%BD/&quot;&gt;利用vps搭建BT离线下载&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://t.du9l.com/2011/02/post2/&quot;&gt;在Linux VPS上下载BT的配置方法&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://xubiji.com/11658.html&quot;&gt;Cloud Torrent 安装教程 – 支持BT种子、磁力链接远程离线下载&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://yepster.me/vps/&quot;&gt;一个野生互联网爱好者拿 VPS 干了些什么&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.zrj96.com/post-296.html&quot;&gt;Debian系统下Aria2+AriaNg+h5ai实现离线下载与在线播放&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.senra.me/aria2-and-plex-build-your-own-cloud-video-streaming-service/&quot;&gt;Aria2+Plex实现支持离线下载的小型私人视频云盘&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>toshiba</name></author><category term="vps" /><summary type="html">vps各种玩法</summary></entry><entry><title type="html">Generator函数的含义和用法</title><link href="/js%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/2017/11/20/js-generator/" rel="alternate" type="text/html" title="Generator函数的含义和用法" /><published>2017-11-20T00:00:00+00:00</published><updated>2017-11-20T00:00:00+00:00</updated><id>/js%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/2017/11/20/js-generator</id><content type="html" xml:base="/js%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/2017/11/20/js-generator/">&lt;h2 id=&quot;同步和异步&quot;&gt;同步和异步&lt;/h2&gt;
&lt;p&gt;要了解generator首先需要说一下异步和同步，大家都知道，Javascript的语言执行环境是单线程（Single thread）.所谓&lt;code&gt;单线程&lt;/code&gt;，就是只一次只能完成一个任务如果有多个任务就需要排队，前面一个任务完成，再执行后面一个任务，一次类推。
这种做法&lt;/p&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;好处是实现起来比较简单，执行环境相对单纯.&lt;/li&gt;
    &lt;li&gt;坏处是只要有一个任务耗时很长，后面的任务都必须排队等着，会拖延整个程序的执行。常见的浏览器无响应（假死），往往就是因为某一段Javascript代码长时间运行（比如死循环），导致整个页面卡在这个地方，其他任务无法执行。&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;为了解决上面的问题javascript将语言执行分成了两种： 同步（Synchronous）和异步（Asynchronous）.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;同步模式即从上往下依次执行，等待前一个任务执行完成后在执行下一个任务，执行顺序与代码顺序是一样的。&lt;/li&gt;
  &lt;li&gt;异步模式是每一个任务有一个或者多个回调函数，前一个任务结束后不执行下一个任务而是执行毁掉函数，后一个任务不等前一个任务结束就执行。执行顺序与代码顺序是不一致的，异步的。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;异步模式的四种方法&quot;&gt;异步模式的四种方法&lt;/h2&gt;

&lt;h3 id=&quot;回调函数&quot;&gt;回调函数&lt;/h3&gt;

&lt;p&gt;如果有两个函数f1和f2,后者等待前者的执行结果。但是f1是一个很耗时的任务可以将f2写成f1的回调函数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    function f1(callback) {
        setTimeout(function() {
            // f1的任务代码
            callback();
        },1000)
    }

    f1(f2);

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;回调函数的优点是简单、容易理解和部署，缺点是不利于代码的阅读和维护，各个部分之间高度耦合（Coupling），流程会很混乱，而且每个任务只能指定一个回调函数。&lt;/p&gt;

&lt;h3 id=&quot;事件监听&quot;&gt;事件监听&lt;/h3&gt;
&lt;p&gt;采用事件驱动模式。任务的执行不取决于代码的顺序，而取决于某个事件是否发生，直接上代码&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    f1.on('done', f2); //f1监听'done'如果触发该事件执行f2,使用了jQuery的事件监听
    function f1(callback) {
        setTimeout(function() {
            // f1的任务代码

            f1.trigger('done');
        },1000)
    }

    f1(f2);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;发布订阅&quot;&gt;发布、订阅&lt;/h3&gt;

&lt;p&gt;我们假定，存在一个”信号中心”，某个任务执行完成，就向信号中心”发布”（publish）一个信号，其他任务可以向信号中心”订阅”（subscribe）这个信号，从而知道什么时候自己可以开始执行。这就叫做
&lt;a href=&quot;http://en.wikipedia.org/wiki/Publish-subscribe_pattern&quot;&gt;“发布/订阅模式”（publish-subscribe pattern）&lt;/a&gt;，又称&lt;a href=&quot;https://en.wikipedia.org/wiki/Observer_pattern&quot;&gt;“观察者模式”（observer pattern）&lt;/a&gt;。
这个模式有&lt;a href=&quot;https://msdn.microsoft.com/en-us/magazine/hh201955.aspx?f=255&amp;amp;MSPPError=-2147217396&quot;&gt;多种实现&lt;/a&gt;,本例子使用&lt;a href=&quot;https://gist.github.com/661855&quot;&gt;Tiny Pub/Sub&lt;/a&gt;,这是一个jQuery插件。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    jQuery.subscribe(&quot;done&quot;, f2); //首先，f2向&quot;信号中心&quot;jQuery订阅&quot;done&quot;信号。

    function f1(){
　　　　setTimeout(function () {
　　　　　　// f1的任务代码
　　　　　　jQuery.publish(&quot;done&quot;);
　　　　}, 1000);
　　}
//jQuery.publish(&quot;done&quot;)的意思是，f1执行完成后，向&quot;信号中心&quot;jQuery发布&quot;done&quot;信号，从而引发f2的执行。
//此外，f2完成执行后，也可以取消订阅（unsubscribe）。
　　jQuery.unsubscribe(&quot;done&quot;, f2);

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;promises&quot;&gt;Promises&lt;/h3&gt;
&lt;p&gt;Promises对象是CommonJS工作组提出的一种规范，目的是为异步编程提供统一接口。
它的思想是，每一个异步任务返回一个Promise对象，该对象有一个then方法，允许指定回调函数。比如，f1的回调函数f2,可以写成：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    function f1(){
　　　　var dfd = $.Deferred();
　　　　setTimeout(function () {
　　　　　　// f1的任务代码
　　　　　　dfd.resolve();
　　　　}, 500);
　　　　return dfd.promise;
　　}

　　f1().then(f2);
　　f1().then(f2).then(f3);
　　f1().then(f2).fail(f3);


&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;它还有一个前面三种方法都没有的好处：如果一个任务已经完成，再添加回调函数，该回调函数会立即执行。所以，你不用担心是否错过了某个事件或信号。这种方法的缺点就是编写和理解，都相对比较难。&lt;/p&gt;

&lt;h1 id=&quot;文章参考&quot;&gt;文章参考&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2015/04/generator.html&quot;&gt;Generator 函数的含义与用法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>toshiba</name></author><category term="ES6学习笔记" /><category term="javascript" /><summary type="html">同步和异步 要了解generator首先需要说一下异步和同步，大家都知道，Javascript的语言执行环境是单线程（Single thread）.所谓单线程，就是只一次只能完成一个任务如果有多个任务就需要排队，前面一个任务完成，再执行后面一个任务，一次类推。 这种做法 好处是实现起来比较简单，执行环境相对单纯. 坏处是只要有一个任务耗时很长，后面的任务都必须排队等着，会拖延整个程序的执行。常见的浏览器无响应（假死），往往就是因为某一段Javascript代码长时间运行（比如死循环），导致整个页面卡在这个地方，其他任务无法执行。</summary></entry><entry><title type="html">Lodash.js源码阅读分析（一）</title><link href="/js%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/2017/11/16/lodash-one/" rel="alternate" type="text/html" title="Lodash.js源码阅读分析（一）" /><published>2017-11-16T00:00:00+00:00</published><updated>2017-11-16T00:00:00+00:00</updated><id>/js%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/2017/11/16/lodash-one</id><content type="html" xml:base="/js%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/2017/11/16/lodash-one/">&lt;h2 id=&quot;lodashjs源码阅读分析一&quot;&gt;Lodash.js源码阅读分析（一）&lt;/h2&gt;
&lt;p&gt;通过详细阅读lodash的源码，学习代码风格同时补充基础。&lt;/p&gt;

&lt;h1 id=&quot;文章参考&quot;&gt;文章参考&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://michalbe.blogspot.sg/2013/03/javascript-less-known-parts-bitwise.html&quot;&gt;JavaScript: The less known parts&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000002608050&quot;&gt;JS 的整型你懂了吗？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;延伸阅读&quot;&gt;延伸阅读&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://yanhaijing.com/javascript/2014/03/14/what-every-javascript-developer-should-know-about-floating-points/&quot;&gt;每一个JavaScript开发者应该了解的浮点知识&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://jser.it/blog/2014/07/07/numbers-in-javascript/&quot;&gt;Numbers in JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>toshiba</name></author><category term="Lodash" /><category term="javascript" /><summary type="html">Lodash.js源码阅读分析（一） 通过详细阅读lodash的源码，学习代码风格同时补充基础。</summary></entry><entry><title type="html">SublimeText快捷键</title><link href="/%E7%94%9F%E4%BA%A7%E5%B7%A5%E5%85%B7/2017/11/15/sublime-quick/" rel="alternate" type="text/html" title="SublimeText快捷键" /><published>2017-11-15T00:00:00+00:00</published><updated>2017-11-15T00:00:00+00:00</updated><id>/%E7%94%9F%E4%BA%A7%E5%B7%A5%E5%85%B7/2017/11/15/sublime-quick</id><content type="html" xml:base="/%E7%94%9F%E4%BA%A7%E5%B7%A5%E5%85%B7/2017/11/15/sublime-quick/">&lt;h2 id=&quot;sublime-text-2---实用快捷键-mac-os-x&quot;&gt;Sublime Text 2 - 实用快捷键 (Mac OS X)&lt;/h2&gt;

&lt;h3 id=&quot;打开前往&quot;&gt;打开/前往&lt;/h3&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘T&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;前往文件&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘⌃P&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;前往项目&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘R&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;前往 method&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘⇧P&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;命令提示&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌃G&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;前往行&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌃ `&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;python 控制台&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;编辑&quot;&gt;编辑&lt;/h3&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘L&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;选择行 (重复按下将下一行加入选择)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘D&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;选择词 (重复按下时多重选择相同的词进行多重编辑)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌃⇧M&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;选择括号内的内容&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘⇧↩&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;在当前行前插入新行&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘↩&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;在当前行后插入新行&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌃⇧K&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;删除行&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘KK&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;从光标处删除至行尾&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘K⌫&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;从光标处删除至行首&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘⇧D&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;复制(多)行&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘J&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;合并(多)行&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘KU&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;改为大写&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘KL&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;改为小写&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘ /&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;注释&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘⌥ /&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;块注释&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘Y&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;恢复或重复&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘⇧V&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;粘贴并自动缩进&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌃ space&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;自动完成(重复按下选择下一个提示)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌃M&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;跳转至对应的括号&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;xmlhtml&quot;&gt;XML/HTML&lt;/h3&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘⇧A&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;选择标签内的内容&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘⌥ .&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;闭合当前标签&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;查找替换&quot;&gt;查找/替换&lt;/h3&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘F&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;查找&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘⌥F&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;替换&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘⌥G&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;查找下一个符合当前所选的内容&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘⌃G&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;查找所有符合当前所选的内容进行多重编辑&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘⇧F&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;在所有打开的文件中进行查找&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;拆分窗口标签页&quot;&gt;拆分窗口/标签页&lt;/h3&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘⌥1&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;单列&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘⌥2&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;双列&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘⌥5&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;网格 (4组)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌃[1,2,3,4]&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;焦点移动至相应组&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌃⇧[1,2,3,4]&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;将当前文件移动至相应组&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘[1,2,3…]&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;选择相应标签页&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;书签&quot;&gt;书签&lt;/h3&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘F2&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;添加/去除书签&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;F2&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;下一个书签&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⇧F2&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;前一个书签&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘⇧F2&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;清除书签&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;标记&quot;&gt;标记&lt;/h3&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘K space&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;设置标记&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘KW&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;从光标位置删除至标记&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘KA&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;从光标位置选择至标记&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;⌘KG&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;清除标记&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name>toshiba</name></author><category term="生产工具" /><category term="IDE" /><summary type="html">Sublime Text 2 - 实用快捷键 (Mac OS X)</summary></entry><entry><title type="html">IDEA快捷键</title><link href="/%E7%94%9F%E4%BA%A7%E5%B7%A5%E5%85%B7/2017/11/15/idea-quick/" rel="alternate" type="text/html" title="IDEA快捷键" /><published>2017-11-15T00:00:00+00:00</published><updated>2017-11-15T00:00:00+00:00</updated><id>/%E7%94%9F%E4%BA%A7%E5%B7%A5%E5%85%B7/2017/11/15/idea-quick</id><content type="html" xml:base="/%E7%94%9F%E4%BA%A7%E5%B7%A5%E5%85%B7/2017/11/15/idea-quick/">&lt;h3 id=&quot;intellij-idea-for-mac-快捷键&quot;&gt;IntelliJ IDEA For Mac 快捷键&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;根据官方pdf翻译：&lt;a href=&quot;https://www.jetbrains.com/idea/docs/IntelliJIDEA_ReferenceCard_Mac.pdf&quot;&gt;https://www.jetbrains.com/idea/docs/IntelliJIDEA_ReferenceCard_Mac.pdf&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;在 IntelliJ IDEA 中有两个 Mac 版本的快捷键，一个叫做：Mac OS X，一个叫做：Mac OS X 10.5+&lt;/li&gt;
  &lt;li&gt;目前都是用：Mac OS X 10.5+&lt;/li&gt;
  &lt;li&gt;有两套的原因：&lt;a href=&quot;https://intellij-support.jetbrains.com/hc/en-us/community/posts/206159109-Updated-Mac-OS-X-keymap-Feedback-needed&quot;&gt;https://intellij-support.jetbrains.com/hc/en-us/community/posts/206159109-Updated-Mac-OS-X-keymap-Feedback-needed&lt;/a&gt;
    &lt;blockquote&gt;
      &lt;p&gt;建议将 Mac 系统中与 IntelliJ IDEA 冲突的快捷键取消或更改，不建议改 IntelliJ IDEA 的默认快捷键。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;mac键盘符号和修饰键说明&quot;&gt;Mac键盘符号和修饰键说明&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;⌘&lt;/code&gt; Command&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;⇧&lt;/code&gt; Shift&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;⌥&lt;/code&gt; Option&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;⌃&lt;/code&gt; Control&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;↩︎&lt;/code&gt; Return/Enter&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;⌫&lt;/code&gt; Delete&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;⌦&lt;/code&gt; 向前删除键（Fn+Delete）&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;↑&lt;/code&gt; 上箭头&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;↓&lt;/code&gt; 下箭头&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;←&lt;/code&gt; 左箭头&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;→&lt;/code&gt; 右箭头&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;⇞&lt;/code&gt; Page Up（Fn+↑）&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;⇟&lt;/code&gt; Page Down（Fn+↓）&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Home&lt;/code&gt; Fn + ←&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;End&lt;/code&gt; Fn + →&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;⇥&lt;/code&gt; 右制表符（Tab键）&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;⇤&lt;/code&gt; 左制表符（Shift+Tab）&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;⎋&lt;/code&gt; Escape (Esc)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;一editing编辑&quot;&gt;一、Editing（编辑）&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;Control + Space&lt;/code&gt; 基本的代码补全（补全任何类、方法、变量）&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Control + Shift + Space&lt;/code&gt; 智能代码补全（过滤器方法列表和变量的预期类型）&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Shift + Enter&lt;/code&gt; 自动结束代码，行末自动添加分号&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + P&lt;/code&gt; 显示方法的参数信息&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Control + J&lt;/code&gt; 快速查看文档&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Shift + F1&lt;/code&gt; 查看外部文档（在某些代码上会触发打开浏览器显示相关文档）&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + 鼠标放在代码上&lt;/code&gt; 显示代码简要信息&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + F1&lt;/code&gt; 在错误或警告处显示具体描述信息&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + N, Control + Enter, Control + N&lt;/code&gt; 生成代码（getter、setter、构造函数、hashCode/equals,toString）&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Control + O&lt;/code&gt; 覆盖方法（重写父类方法）&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Control + I&lt;/code&gt; 实现方法（实现接口中的方法）&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Option + T&lt;/code&gt; 包围代码（使用if..else, try..catch, for, synchronized等包围选中的代码）&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + /&lt;/code&gt; 注释/取消注释与行注释&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Option + /&lt;/code&gt; 注释/取消注释与块注释&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Option + 方向键上&lt;/code&gt; 连续选中代码块&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Option + 方向键下&lt;/code&gt; 减少当前选中的代码块&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Control + Shift + Q&lt;/code&gt; 显示上下文信息&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Option + Enter&lt;/code&gt; 显示意向动作和快速修复代码&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Option + L&lt;/code&gt; 格式化代码&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Control + Option + O&lt;/code&gt; 优化import&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Control + Option + I&lt;/code&gt; 自动缩进线&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Tab / Shift + Tab&lt;/code&gt; 缩进代码 / 反缩进代码&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + X&lt;/code&gt; 剪切当前行或选定的块到剪贴板&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + C&lt;/code&gt; 复制当前行或选定的块到剪贴板&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + V&lt;/code&gt; 从剪贴板粘贴&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Shift + V&lt;/code&gt; 从最近的缓冲区粘贴&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + D&lt;/code&gt; 复制当前行或选定的块&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Delete&lt;/code&gt; 删除当前行或选定的块的行&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Control + Shift + J&lt;/code&gt; 智能的将代码拼接成一行&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Enter&lt;/code&gt; 智能的拆分拼接的行&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Shift + Enter&lt;/code&gt; 开始新的一行&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Shift + U&lt;/code&gt; 大小写切换&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Shift + ] / Command + Shift + [&lt;/code&gt; 选择直到代码块结束/开始*   &lt;code&gt;Option + Fn + Delete&lt;/code&gt; 删除到单词的末尾&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Option + Delete&lt;/code&gt; 删除到单词的开头&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + 加号 / Command + 减号&lt;/code&gt; 展开 / 折叠代码块&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Shift + 加号&lt;/code&gt; 展开所以代码块&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Shift + 减号&lt;/code&gt; 折叠所有代码块&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + W&lt;/code&gt; 关闭活动的编辑器选项卡&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;二searchreplace查询替换&quot;&gt;二、Search/Replace（查询/替换）&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;Double Shift&lt;/code&gt; 查询任何东西&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + F&lt;/code&gt; 文件内查找&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + G&lt;/code&gt; 查找模式下，向下查找&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Shift + G&lt;/code&gt; 查找模式下，向上查找&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + R&lt;/code&gt; 文件内替换&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Shift + F&lt;/code&gt; 全局查找（根据路径）&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Shift + R&lt;/code&gt; 全局替换（根据路径）&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Shift + S&lt;/code&gt; 查询结构（Ultimate Edition 版专用，需要在Keymap中设置）&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Shift + M&lt;/code&gt; 替换结构（Ultimate Edition 版专用，需要在Keymap中设置）&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;三usage-search使用查询&quot;&gt;三、Usage Search（使用查询）&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;Option + F7 / Command + F7&lt;/code&gt; 在文件中查找用法 / 在类中查找用法&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Shift + F7&lt;/code&gt; 在文件中突出显示的用法&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Option + F7&lt;/code&gt; 显示用法&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;四compile-and-run编译和运行&quot;&gt;四、Compile and Run（编译和运行）&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;Command + F9&lt;/code&gt; 编译Project&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Shift + F9&lt;/code&gt; 编译选择的文件、包或模块&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Control + Option + R&lt;/code&gt; 弹出 Run 的可选择菜单&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Control + Option + D&lt;/code&gt; 弹出 Debug 的可选择菜单&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Control + R&lt;/code&gt; 运行&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Control + D&lt;/code&gt; 调试&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Control + Shift + R, Control + Shift + D&lt;/code&gt; 从编辑器运行上下文环境配置&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;五debugging调试&quot;&gt;五、Debugging（调试）&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;F8&lt;/code&gt; 进入下一步，如果当前行断点是一个方法，则不进入当前方法体内&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;F7&lt;/code&gt; 进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Shift + F7&lt;/code&gt; 智能步入，断点所在行上有多个方法调用，会弹出进入哪个方法&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Shift + F8&lt;/code&gt; 跳出&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Option + F9&lt;/code&gt; 运行到光标处，如果光标前有其他断点会进入到该断点&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Option + F8&lt;/code&gt; 计算表达式（可以更改变量值使其生效）&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Option + R&lt;/code&gt; 恢复程序运行，如果该断点下面代码还有断点则停在下一个断点上&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + F8&lt;/code&gt; 切换断点（若光标当前行有断点则取消断点，没有则加上断点）&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Shift + F8&lt;/code&gt; 查看断点信息&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;六navigation导航&quot;&gt;六、Navigation（导航）&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;Command + O&lt;/code&gt; 查找类文件&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Shift + O&lt;/code&gt; 查找所有类型文件、打开文件、打开目录，打开目录需要在输入的内容前面或后面加一个反斜杠&lt;code&gt;/&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Option + O&lt;/code&gt; 前往指定的变量 / 方法&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Control + 方向键左 / Control + 方向键右&lt;/code&gt; 左右切换打开的编辑tab页&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;F12&lt;/code&gt; 返回到前一个工具窗口&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Esc&lt;/code&gt; 从工具窗口进入代码文件窗口&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Shift + Esc&lt;/code&gt; 隐藏当前或最后一个活动的窗口，且光标进入代码文件窗口&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Shift + F4&lt;/code&gt; 关闭活动run/messages/find/… tab&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + L&lt;/code&gt; 在当前文件跳转到某一行的指定处&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + E&lt;/code&gt; 显示最近打开的文件记录列表&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Option + 方向键左 / Option + 方向键右&lt;/code&gt; 光标跳转到当前单词 / 中文句的左 / 右侧开头位置&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Option + 方向键左 / Command + Option + 方向键右&lt;/code&gt; 退回 / 前进到上一个操作的地方&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Shift + Delete&lt;/code&gt; 跳转到最后一个编辑的地方&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Option + F1&lt;/code&gt; 显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择(如在代码编辑窗口可以选择显示该文件的Finder)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + B / Command +  鼠标点击&lt;/code&gt; 进入光标所在的方法/变量的接口或是定义处&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Option + B&lt;/code&gt; 跳转到实现处，在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Option + Space, Command + Y&lt;/code&gt; 快速打开光标所在方法、类的定义&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Control + Shift + B&lt;/code&gt; 跳转到类型声明处&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + U&lt;/code&gt; 前往当前光标所在方法的父类的方法 / 接口定义&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Control + 方向键下 / Control + 方向键上&lt;/code&gt; 当前光标跳转到当前文件的前一个/后一个方法名位置&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + ] / Command + [&lt;/code&gt; 移动光标到当前所在代码的花括号开始/结束位置&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + F12&lt;/code&gt; 弹出当前文件结构层，可以在弹出的层上直接输入进行筛选（可用于搜索类中的方法）&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Control + H&lt;/code&gt; 显示当前类的层次结构&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Shift + H&lt;/code&gt; 显示方法层次结构&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Control + Option + H&lt;/code&gt; 显示调用层次结构&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;F2 / Shift + F2&lt;/code&gt; 跳转到下一个/上一个突出错误或警告的位置&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;F4 / Command + 方向键下&lt;/code&gt; 编辑/查看代码源&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Option + Home&lt;/code&gt; 显示到当前文件的导航条&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;F3&lt;/code&gt;选中文件/文件夹/代码行，添加/取消书签&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Option + F3&lt;/code&gt; 选中文件/文件夹/代码行，使用助记符添加/取消书签&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Control + 0...Control + 9&lt;/code&gt; 定位到对应数值的书签位置&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + F3&lt;/code&gt; 显示所有书签&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;七refactoring重构&quot;&gt;七、Refactoring（重构）&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;F5&lt;/code&gt; 复制文件到指定目录&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;F6&lt;/code&gt; 移动文件到指定目录&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Delete&lt;/code&gt; 在文件上为安全删除文件，弹出确认框&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Shift + F6&lt;/code&gt; 重命名文件&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + F6&lt;/code&gt; 更改签名&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Option + N&lt;/code&gt; 一致性&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Option + M&lt;/code&gt; 将选中的代码提取为方法&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Option + V&lt;/code&gt; 提取变量&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Option + F&lt;/code&gt; 提取字段&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Option + C&lt;/code&gt; 提取常量&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Option + P&lt;/code&gt; 提取参数&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;八vcslocal-history版本控制本地历史记录&quot;&gt;八、VCS/Local History（版本控制/本地历史记录）&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;Command + K&lt;/code&gt; 提交代码到版本控制器&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + T&lt;/code&gt; 从版本控制器更新代码&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Option + Shift + C&lt;/code&gt; 查看最近的变更记录&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Control + C&lt;/code&gt; 快速弹出版本控制器操作面板&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;九live-templates动态代码模板&quot;&gt;九、Live Templates（动态代码模板）&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;Command + Option + J&lt;/code&gt; 弹出模板选择窗口，将选定的代码使用动态模板包住&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + J&lt;/code&gt; 插入自定义动态代码模板&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;十general通用&quot;&gt;十、General（通用）&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;Command + 1...Command + 9&lt;/code&gt; 打开相应编号的工具窗口&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + S&lt;/code&gt; 保存所有&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Option + Y&lt;/code&gt; 同步、刷新&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Control + Command + F&lt;/code&gt; 切换全屏模式&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + Shift + F12&lt;/code&gt; 切换最大化编辑器&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Option + Shift + F&lt;/code&gt; 添加到收藏夹&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Option + Shift + I&lt;/code&gt; 检查当前文件与当前的配置文件&lt;/li&gt;
  &lt;li&gt;Control + ` 快速切换当前的scheme（切换主题、代码样式等）&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + ,&lt;/code&gt; 打开IDEA系统设置&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Command + ;&lt;/code&gt; 打开项目结构对话框&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Shift + Command + A&lt;/code&gt; 查找动作（可设置相关选项）&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Control + Shift + Tab&lt;/code&gt; 编辑窗口标签和工具窗口之间切换（如果在切换的过程加按上delete，则是关闭对应选中的窗口）&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;十一other一些官方文档上没有体现的快捷键&quot;&gt;十一、Other（一些官方文档上没有体现的快捷键）&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;Command + Shift +8&lt;/code&gt; 竖编辑模式&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;参考文章&quot;&gt;参考文章&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://wiki.jikexueyuan.com/project/intellij-idea-tutorial/keymap-mac-introduce.html&quot;&gt;IntelliJ IDEA For Mac 快捷键&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>toshiba</name></author><category term="生产工具" /><category term="IDE" /><summary type="html">IntelliJ IDEA For Mac 快捷键</summary></entry></feed>